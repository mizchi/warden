// Generated by CoffeeScript 1.7.1
(function() {
  "use strict";
  var Grapnel, Warden, find,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  find = function(list, fn) {
    var i, _i, _len;
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      i = list[_i];
      if (fn(i)) {
        return i;
      }
    }
    return null;
  };

  Grapnel = require('./grapnel').Grapnel;

  Warden = (function(_super) {
    __extends(Warden, _super);

    function Warden(opts) {
      var action, route;
      if (opts == null) {
        opts = {};
      }
      this.match = __bind(this.match, this);
      this.findController = __bind(this.findController, this);
      this.navigate = __bind(this.navigate, this);
      Warden.__super__.constructor.apply(this, arguments);
      if (opts.routes instanceof Function) {
        opts.routes(this.match);
      } else if (opts.routes instanceof Object) {
        for (route in routes) {
          action = routes[route];
          this.match(route, action);
        }
      }
    }

    Warden.replaceLinksToHashChange = function() {
      if (typeof $ === "undefined" || $ === null) {
        throw 'Require jQuery or zepto';
      }
      return $('body').on('click', 'a', (function(_this) {
        return function(event) {
          var href;
          event.preventDefault();
          href = $(event.target).attr('href').replace(/^(#|\/)/, '');
          return Warden.navigate(href);
        };
      })(this));
    };

    Warden.navigate = function(path) {
      path = path.replace(/^(#|\/)/, '');
      return location.href = '#' + path;
    };

    Warden.prototype.navigate = function(path) {
      return Warden.navigate(path, this.pushState);
    };

    Warden.prototype.findController = function(controllerName) {
      return require("controllers/" + controllerName + "-controller");
    };

    Warden.prototype.match = function(route, requirement) {
      var Controller, action, actionName, continueAnyway, controllerName, _ref;
      _ref = requirement.split('#'), controllerName = _ref[0], actionName = _ref[1];
      Controller = this.findController(controllerName);
      continueAnyway = function(maybePromise, next) {
        var _ref1;
        return (_ref1 = maybePromise != null ? typeof maybePromise.then === "function" ? maybePromise.then(next) : void 0 : void 0) != null ? _ref1 : next();
      };
      action = (function(_this) {
        return function(req) {
          var lastController, _ref1, _ref2;
          lastController = (_ref1 = _this.currentController) != null ? _ref1 : {};
          _this.currentController = new Controller({
            pushState: _this.pushState
          });
          _this.currentController.setLastUsings((_ref2 = lastController.usings) != null ? _ref2 : []);
          return continueAnyway(_this.currentController.beforeAction(req.params), function() {
            return continueAnyway(_this.currentController[actionName](req.params), function() {
              _this.currentController.fix();
              return continueAnyway(typeof lastController.dispose === "function" ? lastController.dispose() : void 0, function() {
                return continueAnyway(_this.currentController.afterAction(req.params), function() {
                  try {
                    return window.dispatchEvent(new CustomEvent('warden:routed', {
                      req: req,
                      controllerName: controllerName,
                      actionName: actionName
                    }));
                  } catch (_error) {}
                });
              });
            });
          });
        };
      })(this);
      return this.get(route, action);
    };

    return Warden;

  })(Grapnel);

  Warden.Controller = (function() {
    function Controller(opts) {
      this.dispose = __bind(this.dispose, this);
      this.navigate = __bind(this.navigate, this);
      this.reuse = __bind(this.reuse, this);
      var _ref;
      this.pushState = (_ref = opts != null ? opts.pushState : void 0) != null ? _ref : false;
      this.fixed = false;
      this.lastUsings = [];
      this.usings = [];
    }

    Controller.findInstance = function(usings, target) {
      var _ref, _ref1;
      return (_ref = (_ref1 = find(usings, function(using) {
        if ((typeof target) === 'string') {
          return using.key === target;
        } else if (target instanceof Function) {
          return using.instance.constructor === target;
        } else if (target instanceof Object) {
          return using.instance === target;
        }
      })) != null ? _ref1.instance : void 0) != null ? _ref : null;
    };

    Controller.prototype._createInstance = function(maybeNewable) {
      var _ref;
      if (maybeNewable instanceof Function) {
        if (!(maybeNewable.prototype.dispose instanceof Function)) {
          console.warn("This class does not have dispose", maybeNewable);
        }
        return new maybeNewable;
      } else if (maybeNewable instanceof Object) {
        if (!(maybeNewable.dispose instanceof Function)) {
          console.warn("This object does not have dispose", maybeNewable);
        }
        return maybeNewable;
      } else {
        throw new Error("Warden can't compose " + ((_ref = maybeNewable != null ? typeof maybeNewable.toString === "function" ? maybeNewable.toString() : void 0 : void 0) != null ? _ref : maybeNewable));
      }
    };

    Controller.prototype.setLastUsings = function(lastUsings) {
      this.lastUsings = lastUsings;
    };

    Controller.prototype._reuseFrom = function(usings, target, maybeNewable) {
      var instance, key, _ref;
      instance = (_ref = this.constructor.findInstance(usings, target)) != null ? _ref : this._createInstance(maybeNewable != null ? maybeNewable : target);
      key = (typeof target) === 'string' ? target : instance;
      this.usings.push({
        instance: instance,
        key: key
      });
      return instance;
    };

    Controller.prototype.reuse = function(target, maybeNewable) {
      if (maybeNewable == null) {
        maybeNewable = null;
      }
      if (this.fixed) {
        throw 'Post fixed reuse exception';
      }
      return this._reuseFrom(this.lastUsings, target, maybeNewable);
    };

    Controller.prototype.use = function(target, maybeNewable) {
      var instance;
      if (!this.fixed) {
        throw 'Pre fixed use exception';
      }
      instance = this.constructor.findInstance(this.usings, target);
      if (instance != null) {
        return instance;
      }
      return this._reuseFrom(this.usings, target, maybeNewable);
    };

    Controller.prototype.navigate = function(path) {
      return Warden.navigate(path);
    };

    Controller.prototype.fix = function() {
      var alsoUsed, used, _i, _len, _ref;
      if (this.fixed) {
        throw 'Warden.Controller#fix can be called only once';
      }
      _ref = this.lastUsings;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        used = _ref[_i];
        alsoUsed = this.constructor.findInstance(this.usings, used.key);
        if (alsoUsed == null) {
          used.instance.dispose();
        }
      }
      this.fixed = true;
      return delete this.lastUsings;
    };

    Controller.prototype.dispose = function() {
      return delete this.usings;
    };

    Controller.prototype.beforeAction = function(params) {};

    Controller.prototype.afterAction = function(params) {};

    return Controller;

  })();

  if ('function' === typeof window.define) {
    window.define(function(require) {
      return Warden;
    });
  } else {
    window.Warden = Warden;
  }

}).call(this);
